{"version":3,"sources":["Config.js","components/globals/Header.js","components/globals/Footer.js","components/exercises/FeaturesItem.js","components/exercises/Features.js","components/exercises/RunningWords/RunningWordsPlay.js","components/exercises/RunningWords/RunningWordsAnswer.js","components/exercises/RunningWords/RunningWordsFinished.js","utils/wordGenerator/WordsGenerator.js","components/exercises/RunningWords/RunningWords.js","components/exercises/WordWPMController.js","components/exercises/ColumnsOfWords/ColumnsOfWordsPlay.js","components/exercises/ColumnsOfWords/ColumnsOfWords.js","components/exercises/BlockOfWords/BlockOfWordsPlay.js","components/exercises/BlockOfWords/BlockOfWords.js","components/exercises/SpeedReadingTest/SpeedReadingTest.js","components/exercises/ReadingHelper/ReadingHelperController.js","components/exercises/ReadingHelper/ReadingHelper.js","App.js","serviceWorker.js","index.js"],"names":["Config","googleTrackingId","Header","className","to","data-toggle","data-target","id","role","Component","Footer","href","FeaturesItem","this","props","icon","title","description","link","Features","RunningWordsPlay","items","Object","keys","wordsExcecise","map","item","key","wpm","RunningWordsAnswer","list","answerList","i","length","word","color","state","isAnswered","el","isCorrect","correctWord","e","setState","answerMethod","disabled","onClick","answerSelected","type","RunningWordsFinished","correctAnswers","wrongAnswers","window","location","reload","WordsGenerator","options","maxLength","wordUsed","rightSize","generateRandomWord","generateWordWithMaxLength","wordList","min","max","Math","floor","random","randInt","wordsPerString","abs","formatter","separator","results","token","relativeIndex","push","join","RunningWords","totalWords","wordsExcise","index","init","statusView","currentWordRef","nextFireWord","endRoundTime","roundCount","roundAmount","roundFrequency","timeout","pickRandomWord","nextWordRef","time","nexRoundTime","array","temporaryValue","randomIndex","currentIndex","Array","fill","shuffle","resetInitInterval","setTimeout","bind","onAnimationFrameInit","setAnswerArray","console","log","wpmToMs","addNewWord","getResponseFromUser","View","ReactAnimationFrame","WordWPMController","aria-valuenow","aria-valuemin","aria-valuemax","style","width","progressBar","userChangeWords","amountOfWords","userChangeWPM","ColumnsOfWordsPlay","columnList","words","ColumnsOfWords","totalColumns","maxAmountOfWords","currentRef","nextStyleChange","endSessionTime","number","isUp","changeAllWords","finish","changeStatus","completed","parseFloat","BlockOfWordsPlay","currentWord","BlockOfWords","changeWords","SpeedReadingTest","initTime","isFinished","idContainer","area","document","getElementById","Countable","count","counter","Date","now","minutes","round","Number","EPSILON","userEndTheTest","ReadingHelperController","onChange","userRemoveWords","userResetWords","value","dividerSpacing","userChangeDividerSpacing","ReadingHelper","divider","wordRef","removeWords","toSpanSelector","disappearAnimationClass","appearAnimationClass","$","each","text","split","len","html","addClass","removeClass","tick","event","target","checked","left","right","App","history","createBrowserHistory","ReactGA","initialize","listen","set","page","pathname","pageview","exact","path","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0239100e.chunk.js","sourcesContent":["const Config = {\r\n    googleTrackingId: \"UA-147989176-3\"\r\n}\r\n\r\nexport default Config;","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-light navbar-expand-md navigation-clean\">\r\n                    <div className=\"container\">\r\n                        <Link className=\"navbar-brand\" to='/'>Reatiner</Link>\r\n                        <button\r\n                            data-toggle=\"collapse\"\r\n                            className=\"navbar-toggler\"\r\n                            data-target=\"#navcol-1\">\r\n                            <span className=\"sr-only\">Toggle navigation</span>\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navcol-1\">\r\n                            <ul className=\"nav navbar-nav ml-auto\">\r\n                                <li className=\"nav-item\" role=\"presentation\">\r\n                                    <Link className=\"nav-link\" to='/'>Features</Link>\r\n                                </li>\r\n                                <li className=\"nav-item\" role=\"presentation\">\r\n                                    <a className=\"nav-link\">Tips</a>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"footer-clean\">\r\n                <footer>\r\n                    <div className=\"container\">\r\n                        <div className=\"row justify-content-center\">\r\n                            <div className=\"col-lg-12 text-center\">\r\n                                <h3>\r\n                                    Checkout the code on:\r\n                                </h3>\r\n                                <a href='https://github.com/balmacefa/reading-trainer'>https://github.com/balmacefa/reading-trainer</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class FeaturesItem extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-sm-6 col-md-5 col-lg-4 item\">\r\n                <div className=\"box\">\r\n                    <i className={`fa ${this.props.icon} icon`}></i>\r\n                    <h3 className=\"name\">{this.props.title}</h3>\r\n                    <p className=\"description\">{this.props.description}</p>\r\n                    <Link className=\"learn-more\" to={this.props.link}>Start »</Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nFeaturesItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    link: PropTypes.string.isRequired,\r\n    icon: PropTypes.string.isRequired,\r\n};\r\n","import React, {Component} from 'react'\r\nimport FeaturesItem from './FeaturesItem'\r\nexport default class Features extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"features-boxed\">\r\n                    <div className=\"container\">\r\n                        <div className=\"intro\">\r\n                            <h2 className=\"text-center\">Features\r\n                            </h2>\r\n                        </div>\r\n                        <div className=\"row justify-content-center features\">\r\n\r\n                            <FeaturesItem\r\n                                icon='fa-bullseye'\r\n                                title='Speed reading test'\r\n                                description='Test your wpm or words per minutes.'\r\n                                link='/speed-reading-test'/>\r\n\r\n                            <FeaturesItem\r\n                                icon='fa-newspaper-o'\r\n                                title='Reading helper'\r\n                                link='/reading-helper'\r\n                                description='The reading helper remove the words, preventing you to reread and force you to read in a constant velocity.'/>\r\n\r\n                            <FeaturesItem\r\n                                icon='fa-bolt'\r\n                                title='Running Words'\r\n                                description='The aim of this exercise is to see all the words on\r\n                            the screen, focusing on the center.'\r\n                                link='/running-words'/>\r\n\r\n                            <FeaturesItem\r\n                                icon='fa-stack-overflow'\r\n                                title='Columns of words'\r\n                                description='The exercise develops concentration, that allows you\r\n                                to absord a lot of information.'\r\n                                link='/columns-of-words'/>\r\n\r\n                            <FeaturesItem\r\n                                icon='fa-align-justify'\r\n                                title='Block of words'\r\n                                description='Expand the line of sight and increase the amount of text captured by the eyes.'\r\n                                link='/block-of-words'/>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class RunningWordsPlay extends Component {\r\n\r\n    render() {\r\n        const items = Object\r\n            .keys(this.props.wordsExcecise)\r\n            .map(item => <div key={item} className=\"col-4 mb-2 p-1\">\r\n                <div className=\"underline\">\r\n                    <p className={`mb-0 min-height-24 f-verdana`}>{this.props.wordsExcecise[item]}</p>\r\n                </div>\r\n            </div>);\r\n        return (\r\n            <Fragment>\r\n                <div className=\"container Exercise-description\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h2 className=\"text-center\">Running words</h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container text-center running-words-container\">\r\n                    <div className=\"row mb-5\">\r\n                        <div className=\"col-2 offset-10\">\r\n                            <h6 className=\"text-right text-black-50 mb-0\">{this.props.wpm}</h6>\r\n                            <h6 className=\"text-right text-black-50\">wpm</h6>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        {items}\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nRunningWordsPlay.propTypes = {\r\n    wordsExcecise: PropTypes.array.isRequired,\r\n    wpm: PropTypes.number.isRequired\r\n};\r\n","import React, {Component, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class RunningWordsAnswer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let list = props.answerList;\r\n\r\n        this.answerList = {}\r\n        for (let i = 0; i < list.length; i++) {\r\n            this.answerList[i] = {\r\n                word: list[i],\r\n                color: 'btn-dark'\r\n            };\r\n        }\r\n\r\n        this.state = {\r\n            isAnswered: false,\r\n            answerList: this.answerList\r\n        };\r\n    }\r\n\r\n    answerSelected(el) {\r\n        let isCorrect;\r\n        if (el.word === this.props.correctWord) {\r\n            // Correct\r\n            isCorrect = true;\r\n            el.color = 'btn-info';\r\n        } else {\r\n            // wrong\r\n            isCorrect = false;\r\n            el.color = 'btn-danger';\r\n            Object\r\n                .keys(this.state.answerList)\r\n                .map((key) => {\r\n                    const e = this.state.answerList[key];\r\n                    if (e.word === this.props.correctWord) {\r\n                        e.color = 'btn-info';\r\n                        return null;\r\n                    }\r\n                    return null;\r\n                });\r\n        }\r\n        this.setState({answerList: this.answerList, isAnswered: true});\r\n        this\r\n            .props\r\n            .answerMethod(isCorrect);\r\n    }\r\n\r\n    render() {\r\n        const items = Object\r\n            .keys(this.state.answerList)\r\n            .map((key) => {\r\n                const el = this.state.answerList[key];\r\n                return (\r\n                    <div key={el.word} className=\"col-6 p-7\">\r\n                        <div>\r\n                            <button\r\n                                disabled={this.state.isAnswered}\r\n                                onClick={() => this.answerSelected(el)}\r\n                                className={`btn ${el.color} btn-block p-2`}\r\n                                type=\"button\">{el.word}</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        return (\r\n            <Fragment>\r\n                <div\r\n                    className=\"container text-center running-words-container r-w-container-respuestas\">\r\n                    <div className=\"row mb-5\">\r\n                        <div className=\"col-12\">\r\n                            <h1 className=\"text-monospace text-center text-black-50\">Speed</h1>\r\n                            <h3 className=\"text-center text-black-50 mb-0\">{this.props.wpm}</h3>\r\n                            <h6 className=\"text-center text-black-50\">wpm</h6>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mb-2\">\r\n                        <div className=\"col-12\">\r\n                            <h6 className=\"text-center text-black-50\">Select the last word:</h6>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        {items}\r\n                        <div className=\"col-12 p-3\">\r\n                            <button\r\n                                disabled={this.state.isAnswered}\r\n                                onClick={() => this.answerSelected({word: '...'})}\r\n                                className={`btn btn-warning btn-block p-2`}\r\n                                type=\"button\">I don&apos;t know</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nRunningWordsAnswer.propTypes = {\r\n    answerList: PropTypes.array.isRequired,\r\n    wpm: PropTypes.number.isRequired,\r\n    correctWord: PropTypes.string.isRequired,\r\n    answerMethod: PropTypes.func.isRequired\r\n};\r\n","import React, {Component, Fragment} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class RunningWordsFinished extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div\r\n                    className=\"container text-center running-words-container r-w-container-respuestas\">\r\n                    <div className=\"row mb-5\">\r\n                        <div className=\"col-12\">\r\n                            <h1 className=\"text-monospace text-center text-black-50\">Speed</h1>\r\n                            <h3 className=\"text-center text-black-50 mb-0\">{this.props.wpm}</h3>\r\n                            <h6 className=\"text-center text-black-50\">wpm</h6>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-7\">\r\n                            <h6 className=\"text-center text-black-50\">Correct answers: {this.props.correctAnswers}</h6>\r\n                            <h6 className=\"text-center text-black-50\">Wrong answers: {this.props.wrongAnswers}</h6>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-7\">\r\n                            <p\r\n                                className=\"link\"\r\n                                onClick={() => {\r\n                                window\r\n                                    .location\r\n                                    .reload();\r\n                            }}>Reset</p>\r\n                        </div>\r\n                        <div className=\"col-12 p-7\">\r\n                            <Link className=\"learn-more\" to=\"/\">Exit</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nRunningWordsFinished.propTypes = {\r\n    wpm: PropTypes.number.isRequired,\r\n    correctAnswers: PropTypes.number.isRequired,\r\n    wrongAnswers: PropTypes.number.isRequired\r\n};","import wordList from './wordList.json';\n\nfunction WordsGenerator(options) {\n    function WordsGenerator() {\n        if (options && options.maxLength > 1) {\n            return generateWordWithMaxLength();\n        } else {\n            return generateRandomWord();\n        }\n    }\n\n    function generateWordWithMaxLength() {\n        let rightSize = false;\n        let wordUsed;\n        while (!rightSize) {\n            wordUsed = generateRandomWord();\n            if (wordUsed.length <= options.maxLength) {\n                rightSize = true;\n            }\n        }\n        return wordUsed;\n    }\n\n    function generateRandomWord() {\n        return wordList[randInt()];\n    }\n\n    function randInt(min = 1, max = wordList.length) {\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    // No arguments = generate one word\n    if (typeof options === 'undefined') {\n        return WordsGenerator();\n    }\n\n    // Just a number = return that many words\n    if (typeof options === 'number') {\n        options = {\n            wordsPerString: options\n        };\n    }\n\n    // not a number = one word par string\n    if (typeof options.wordsPerString !== 'number') {\n        options.wordsPerString = 1;\n    }\n    options.wordsPerString = Math.abs(options.wordsPerString);\n\n    //not a function = returns the raw word\n    if (typeof options.formatter !== 'function') {\n        options.formatter = word => word;\n    }\n\n    //not a string = separator is a space\n    if (typeof options.separator !== 'string') {\n        options.separator = ' ';\n    }\n\n    const results = [];\n    let token = '';\n    let relativeIndex = 0;\n\n    for (let i = 0; i < options.wordsPerString; i++) {\n        if (relativeIndex === options.wordsPerString - 1) {\n            token += options.formatter(WordsGenerator(), relativeIndex);\n        } else {\n            token += options.formatter(WordsGenerator(), relativeIndex) + options.separator;\n        }\n        relativeIndex++;\n\n        //Validate if next String\n        if ((i + 1) % options.wordsPerString === 0) {\n            results.push(token);\n            token = '';\n            relativeIndex = 0;\n        }\n    }\n\n    if (typeof options.join === 'string') {\n        return results.join(options.join);\n    }\n\n    return results;\n\n}\n\nWordsGenerator.wordList = wordList;\nexport default WordsGenerator;","import React, {Component} from 'react';\r\nimport ReactAnimationFrame from 'react-animation-frame';\r\nimport RunningWordsPlay from './RunningWordsPlay.js';\r\nimport RunningWordsAnswer from './RunningWordsAnswer.js';\r\nimport RunningWordsFinished from './RunningWordsFinished.js';\r\n\r\nimport WordsGenerator from '../../../utils/wordGenerator/WordsGenerator';\r\n\r\nclass RunningWords extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.totalWords = 9;\r\n\r\n        const wordsExcise = [];\r\n        for (let index = 0; index < this.totalWords; index++) {\r\n            wordsExcise[index] = '';\r\n        }\r\n\r\n        //'PLAY', ANSWER, FINISHED\r\n        this.state = {\r\n            init: false,\r\n            statusView: 'PLAY',\r\n            wpm: 400,\r\n            wordsExcise\r\n        };\r\n\r\n        this.currentWordRef = this.totalWords - 1;\r\n        this.word = '';\r\n\r\n        this.nextFireWord = 0;\r\n        this.endRoundTime = 0;\r\n        this.roundCount = 0;\r\n        this.roundAmount = 1;\r\n        this.roundFrequency = [1000, 2000];\r\n\r\n        this.timeout = 1000;\r\n\r\n        this.correctAnswers = 0;\r\n        this.wrongAnswers = 0;\r\n    }\r\n\r\n    wpmToMs(wpm) {\r\n        return 60000 / wpm;\r\n    }\r\n    nextWordRef() {\r\n        this.currentWordRef++;\r\n        if (this.currentWordRef >= this.totalWords) {\r\n            this.currentWordRef = 0;\r\n        }\r\n        return this.currentWordRef;\r\n    }\r\n\r\n    addNewWord() {\r\n        this.word = this.pickRandomWord();\r\n        let items = [...this.state.wordsExcise];\r\n\r\n        items[this.currentWordRef] = '';\r\n        items[this.nextWordRef()] = this.word;\r\n        this.setState({wordsExcise: items});\r\n    }\r\n\r\n    pickRandomWord() {\r\n        return WordsGenerator();\r\n    }\r\n\r\n    nexRoundTime(time) {\r\n        // (min is inclusive, max is Exclusive)\r\n        this.endRoundTime = time + (Math.random() * (this.roundFrequency[0] - this.roundFrequency[1]) + this.roundFrequency[1]);\r\n    }\r\n\r\n    onAnimationFrameInit(time) {\r\n        this.setState({init: true});\r\n        this.nextFireWord = 0;\r\n        this.endRoundTime = 0;\r\n\r\n        this.nexRoundTime(time);\r\n    }\r\n\r\n    shuffle(array) {\r\n        var currentIndex = array.length,\r\n            temporaryValue,\r\n            randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    setAnswerArray() {\r\n        let list = Array(6).fill('');\r\n\r\n        for (let index = 0; index < list.length - 1; index++) {\r\n            list[index] = this.pickRandomWord();\r\n        }\r\n\r\n        list[list.length - 1] = this.word;\r\n\r\n        this.shuffle(list);\r\n\r\n        this.setState({answerList: list});\r\n    }\r\n\r\n    getResponseFromUser(isCorrect) {\r\n\r\n        let wpm = this.state.wpm;\r\n\r\n        if (isCorrect) {\r\n            this.correctAnswers++;\r\n            wpm = this.state.wpm + 50;\r\n        } else {\r\n            this.wrongAnswers++;\r\n            if (this.state.wpm > 100) {\r\n                wpm = this.state.wpm - 50;\r\n            }\r\n        }\r\n        this.setState({wpm: wpm});\r\n\r\n        function resetInit() {\r\n            let state = {};\r\n            if (this.roundCount >= this.roundAmount) {\r\n                state = {\r\n                    statusView: \"FINISHED\"\r\n                };\r\n            } else {\r\n                state = {\r\n                    init: false,\r\n                    statusView: \"PLAY\"\r\n                };\r\n            }\r\n            this.setState(state);\r\n\r\n        }\r\n\r\n        this.resetInitInterval = setTimeout(resetInit.bind(this), this.timeout)\r\n\r\n    }\r\n\r\n    onAnimationFrame(time) {\r\n        if (!this.state.init) {\r\n            this.onAnimationFrameInit(time);\r\n        }\r\n\r\n        if (time > this.nextFireWord && time > this.endRoundTime && this.state.statusView === 'PLAY') {\r\n            this.roundCount++;\r\n            this.setAnswerArray();\r\n            this.setState({statusView: \"ANSWER\"});\r\n            console.log(\"END ROUND: \" + this.word);\r\n            return;\r\n        }\r\n        if (time > this.nextFireWord && this.state.statusView === 'PLAY') { //this below is unity docs example\r\n            this.nextFireWord = time + this.wpmToMs(this.state.wpm);\r\n\r\n            this.addNewWord();\r\n        }\r\n    }\r\n\r\n    View() {\r\n        //'PLAY', ANSWER, FINISHED\r\n        switch (this.state.statusView) {\r\n            case 'PLAY':\r\n                return <RunningWordsPlay\r\n                    wordsExcise={this.state.wordsExcise}\r\n                    wpm={this.state.wpm}/>\r\n            case 'ANSWER':\r\n                return <RunningWordsAnswer\r\n                    answerList={this.state.answerList}\r\n                    wpm={this.state.wpm}\r\n                    correctWord={this.word}\r\n                    answerMethod={(isCorrect) => {\r\n                    this.getResponseFromUser(isCorrect)\r\n                }}/>\r\n            case 'FINISHED':\r\n                return <RunningWordsFinished\r\n                    wpm={this.state.wpm}\r\n                    correctAnswers={this.correctAnswers}\r\n                    wrongAnswers={this.wrongAnswers}/>\r\n            default:\r\n                return <h1>ERROR</h1>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.View()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactAnimationFrame(RunningWords);\r\n","import React, {Component, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class WordWPMController extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n\r\n                <div\r\n                    className=\"container text-center running-words-container r-w-container-respuestas\"\r\n                    id=\"controllers\">\r\n                    <div className=\"row justify-content-center mb-2\">\r\n                        <div className=\"col-12\">\r\n                            <div className=\"p-7\">\r\n                                <div className=\"progress\">\r\n                                    <div\r\n                                        className=\"progress-bar bg-secondary\"\r\n                                        aria-valuenow=\"80\"\r\n                                        aria-valuemin=\"0\"\r\n                                        aria-valuemax=\"100\"\r\n                                        style={{\r\n                                        width: this.props.progressBar + '%'\r\n                                    }}>\r\n                                        <span className=\"sr-only\">{this.props.progressBar}%</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center mb-1\">\r\n                        <div className=\"col-2 align-self-center p-7\">\r\n                            <button\r\n                                id=\"btn-words-down\"\r\n                                onClick={() => this.props.userChangeWords(false)}\r\n                                className=\"btn btn-secondary\"\r\n                                type=\"button\">&lt;&lt;</button>\r\n                        </div>\r\n                        <div className=\"col-3 align-self-end\">\r\n                            <div>\r\n                                <h6 className=\"text-center text-black-50 mb-0\">{this.props.amountOfWords}</h6>\r\n                                <h6 className=\"text-center text-black-50\">Words</h6>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-2 align-self-center p-7\">\r\n                            <button\r\n                                id=\"btn-words-up\"\r\n                                onClick={() => this.props.userChangeWords(true)}\r\n                                className=\"btn btn-secondary\"\r\n                                type=\"button\">&gt;&gt;</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-2 align-self-center p-7\">\r\n                            <button\r\n                                id=\"btn-wpm-down\"\r\n                                onClick={() => this.props.userChangeWPM(false)}\r\n                                className=\"btn btn-secondary\"\r\n                                type=\"button\">&lt;&lt;</button>\r\n                        </div>\r\n                        <div className=\"col-3 align-self-end\">\r\n                            <div>\r\n                                <h6 className=\"text-center text-black-50 mb-0\">{this.props.wpm}</h6>\r\n                                <h6 className=\"text-center text-black-50\">wpm</h6>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-2 align-self-center p-7\">\r\n                            <button\r\n                                id=\"btn-wpm-up\"\r\n                                onClick={() => this.props.userChangeWPM(true)}\r\n                                className=\"btn btn-secondary\"\r\n                                type=\"button\">&gt;&gt;</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nWordWPMController.propTypes = {\r\n    wpm: PropTypes.number.isRequired,\r\n    progressBar: PropTypes.number.isRequired,\r\n    amountOfWords: PropTypes.number.isRequired,\r\n    userChangeWords: PropTypes.func.isRequired,\r\n    userChangeWPM: PropTypes.func.isRequired\r\n};\r\n","import React, {Component, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport WordWPMController from '../WordWPMController';\r\n\r\nexport default class ColumnsOfWordsPlay extends Component {\r\n\r\n    render() {\r\n        const items = Object\r\n            .keys(this.props.columnList)\r\n            .map(item => <p\r\n                key={item}\r\n                className={`text-center f-verdana ${this.props.columnList[item].color} description mb-1`}>{this.props.columnList[item].words}</p>);\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"container Exercise-description\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h2 className=\"text-center\">\r\n                                <strong>Columns of words</strong>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container text-center mt-5\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-7\">\r\n                            {items}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <WordWPMController\r\n                    wpm={this.props.wpm}\r\n                    progressBar={this.props.progressBar}\r\n                    amountOfWords={this.props.amountOfWords}\r\n                    userChangeWords={this.props.userChangeWords}\r\n                    userChangeWPM={this.props.userChangeWPM}/>\r\n\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nColumnsOfWordsPlay.propTypes = {\r\n    columnList: PropTypes.array.isRequired,\r\n    wpm: PropTypes.number.isRequired,\r\n    progressBar: PropTypes.number.isRequired,\r\n    amountOfWords: PropTypes.number.isRequired,\r\n    userChangeWords: PropTypes.func.isRequired,\r\n    userChangeWPM: PropTypes.func.isRequired\r\n};\r\n","import React, {Component} from 'react';\r\nimport ReactAnimationFrame from 'react-animation-frame';\r\n// import RunningWordsFinished from './RunningWordsFinished.js';\r\n\r\nimport WordsGenerator from '../../../utils/wordGenerator/WordsGenerator';\r\nimport ColumnsOfWordsPlay from './ColumnsOfWordsPlay.js';\r\n\r\nclass ColumnsOfWords extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.totalColumns = 10;\r\n        this.maxAmountOfWords = 10;\r\n\r\n        let amountOfWords = 1;\r\n\r\n        this.columnList = [];\r\n        for (let index = 0; index < this.totalColumns; index++) {\r\n            this.columnList[index] = {\r\n                color: '',\r\n                words: ''\r\n            };\r\n        }\r\n\r\n        //'PLAY', FINISHED\r\n        this.state = {\r\n            init: false,\r\n            statusView: 'PLAY',\r\n            wpm: 400,\r\n            columnList: this.columnList,\r\n            progressBar: 0,\r\n            amountOfWords: amountOfWords\r\n        };\r\n\r\n        this.currentRef = this.totalColumns - 1;\r\n\r\n        this.nextStyleChange = 0;\r\n        this.endSessionTime = 60 * 1000;\r\n\r\n        this.timeout = 1000;\r\n\r\n    }\r\n\r\n    changeAllWords(number) {\r\n        this\r\n            .columnList\r\n            .map((el) => el.words = WordsGenerator(number));\r\n\r\n        this.setState({columnList: this.columnList});\r\n    }\r\n\r\n    userChangeWords(isUp) {\r\n        let amountOfWords = this.state.amountOfWords;\r\n        if (isUp && amountOfWords < this.maxAmountOfWords) {\r\n            amountOfWords = amountOfWords + 1;\r\n        } else if (amountOfWords > 1) {\r\n            amountOfWords = amountOfWords - 1;\r\n        }\r\n        this.setState({amountOfWords: amountOfWords});\r\n        this.changeAllWords(amountOfWords);\r\n    }\r\n\r\n    userChangeWPM(isUp) {\r\n        let wpm = this.state.wpm;\r\n        if (isUp) {\r\n            wpm = this.state.wpm + 50;\r\n        } else if (this.state.wpm > 100) {\r\n            wpm = this.state.wpm - 50;\r\n        }\r\n        this.setState({wpm: wpm});\r\n    }\r\n\r\n    wpmToMs(wpm) {\r\n        return 60000 / wpm;\r\n    }\r\n    nextWordRef() {\r\n        this.currentRef++;\r\n        if (this.currentRef >= this.totalColumns) {\r\n            this.currentRef = 0;\r\n            this.changeAllWords(this.state.amountOfWords);\r\n        }\r\n        return this.currentRef;\r\n    }\r\n\r\n    changeStatus() {\r\n        this.columnList[this.currentRef].color = ' ';\r\n        this.columnList[this.nextWordRef()].color = 'text-info';\r\n        this.setState({columnList: this.columnList});\r\n    }\r\n\r\n    finish() {\r\n        this.setState({statusView: \"FINISHED\"});\r\n    }\r\n\r\n    onAnimationFrame(time) {\r\n\r\n        if (time >= this.endSessionTime && this.state.statusView === 'PLAY') {\r\n            this.finish();\r\n            return;\r\n        }\r\n        if (time > this.nextStyleChange && this.state.statusView === 'PLAY') { //this below is unity docs example\r\n            this.nextStyleChange = time + this.wpmToMs(this.state.wpm);\r\n\r\n            this.changeStatus();\r\n            this.progressBar(time);\r\n        }\r\n    }\r\n\r\n    progressBar(completed) {\r\n        this.setState({\r\n            progressBar: parseFloat(completed / this.endSessionTime * 100)\r\n        });\r\n    }\r\n\r\n    View() {\r\n        // PLAY , FINISHED\r\n        switch (this.state.statusView) {\r\n            case 'PLAY':\r\n                return <ColumnsOfWordsPlay\r\n                    columnList={this.state.columnList}\r\n                    wpm={this.state.wpm}\r\n                    progressBar={this.state.progressBar}\r\n                    amountOfWords={this.state.amountOfWords}\r\n                    userChangeWords={(isUp) => {\r\n                    this.userChangeWords(isUp)\r\n                }}\r\n                    userChangeWPM={(isUp) => {\r\n                    this.userChangeWPM(isUp)\r\n                }}/>\r\n            case 'FINISHED':\r\n                // return <RunningWordsFinished     wpm={this.state.wpm}\r\n                // correctAnswers={this.correctAnswers}     wrongAnswers={this.wrongAnswers}/>\r\n                return <h1>FINISHED</h1>\r\n\r\n            default:\r\n                return <h1>ERROR</h1>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.View()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactAnimationFrame(ColumnsOfWords);","import React, {Component, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport WordWPMController from '../WordWPMController';\r\n\r\nexport default class BlockOfWordsPlay extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"container Exercise-description\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h2 className=\"text-center\">\r\n                                <strong>Block of words</strong>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    className=\"container border rounded border-info text-center p-7 mt-5\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-7\">\r\n                            <p className=\"text-center description mb-1 f-verdana\">{this.props.currentWord}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <WordWPMController\r\n                    wpm={this.props.wpm}\r\n                    progressBar={this.props.progressBar}\r\n                    amountOfWords={this.props.amountOfWords}\r\n                    userChangeWords={this.props.userChangeWords}\r\n                    userChangeWPM={this.props.userChangeWPM}/>\r\n\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nBlockOfWordsPlay.propTypes = {\r\n    currentWord: PropTypes.string.isRequired,\r\n    wpm: PropTypes.number.isRequired,\r\n    progressBar: PropTypes.number.isRequired,\r\n    amountOfWords: PropTypes.number.isRequired,\r\n    userChangeWords: PropTypes.func.isRequired,\r\n    userChangeWPM: PropTypes.func.isRequired\r\n};\r\n","import React, {Component} from 'react';\r\nimport ReactAnimationFrame from 'react-animation-frame';\r\n// import RunningWordsFinished from './RunningWordsFinished.js';\r\n\r\nimport WordsGenerator from '../../../utils/wordGenerator/WordsGenerator';\r\nimport BlockOfWordsPlay from './BlockOfWordsPlay.js';\r\n\r\nclass BlockOfWords extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let amountOfWords = 1;\r\n\r\n        this.maxAmountOfWords = 10;\r\n\r\n        //'PLAY', FINISHED\r\n        this.state = {\r\n            init: false,\r\n            statusView: 'PLAY',\r\n            wpm: 400,\r\n            progressBar: 0,\r\n            amountOfWords: amountOfWords,\r\n            currentWord: ''\r\n        };\r\n\r\n        this.nextStyleChange = 0;\r\n        this.endSessionTime = 60 * 1000;\r\n\r\n        this.timeout = 1000;\r\n    }\r\n\r\n    changeWords(number) {\r\n        this.setState({currentWord: WordsGenerator(number)});\r\n    }\r\n\r\n    userChangeWords(isUp) {\r\n        let amountOfWords = this.state.amountOfWords;\r\n        if (isUp && amountOfWords < this.maxAmountOfWords) {\r\n            amountOfWords = amountOfWords + 1;\r\n        } else if (amountOfWords > 1) {\r\n            amountOfWords = amountOfWords - 1;\r\n        }\r\n        this.setState({amountOfWords: amountOfWords});\r\n        this.changeWords(amountOfWords);\r\n    }\r\n\r\n    userChangeWPM(isUp) {\r\n        let wpm = this.state.wpm;\r\n        if (isUp) {\r\n            wpm = this.state.wpm + 50;\r\n        } else if (this.state.wpm > 100) {\r\n            wpm = this.state.wpm - 50;\r\n        }\r\n        this.setState({wpm: wpm});\r\n    }\r\n\r\n    wpmToMs(wpm) {\r\n        return 60000 / wpm;\r\n    }\r\n\r\n    finish() {\r\n        this.setState({statusView: \"FINISHED\"});\r\n    }\r\n\r\n    onAnimationFrame(time) {\r\n\r\n        if (time >= this.endSessionTime && this.state.statusView === 'PLAY') {\r\n            this.finish();\r\n            return;\r\n        }\r\n        if (time > this.nextStyleChange && this.state.statusView === 'PLAY') { //this below is unity docs example\r\n            this.nextStyleChange = time + this.wpmToMs(this.state.wpm);\r\n\r\n            this.changeWords(this.state.amountOfWords);\r\n            this.progressBar(time);\r\n        }\r\n    }\r\n\r\n    progressBar(completed) {\r\n        this.setState({\r\n            progressBar: parseFloat(completed / this.endSessionTime * 100)\r\n        });\r\n    }\r\n\r\n    View() {\r\n        // PLAY , FINISHED\r\n        switch (this.state.statusView) {\r\n            case 'PLAY':\r\n                return <BlockOfWordsPlay\r\n                    currentWord={this.state.currentWord}\r\n                    wpm={this.state.wpm}\r\n                    progressBar={this.state.progressBar}\r\n                    amountOfWords={this.state.amountOfWords}\r\n                    userChangeWords={(isUp) => {\r\n                    this.userChangeWords(isUp)\r\n                }}\r\n                    userChangeWPM={(isUp) => {\r\n                    this.userChangeWPM(isUp)\r\n                }}/>\r\n            case 'FINISHED':\r\n                // return <RunningWordsFinished     wpm={this.state.wpm}\r\n                // correctAnswers={this.correctAnswers}     wrongAnswers={this.wrongAnswers}/>\r\n                return <h1>FINISHED</h1>\r\n\r\n            default:\r\n                return <h1>ERROR</h1>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.View()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactAnimationFrame(BlockOfWords);","import React, {Component, Fragment} from 'react';\r\nimport Countable from 'countable';\r\n\r\nclass SpeedReadingTest extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            wpm: 0,\r\n            initTime: 0,\r\n            time: 0,\r\n            isFinished: false,\r\n            amountOfWords: 0\r\n        };\r\n        this.idContainer = 'countableArea';\r\n    }\r\n\r\n    componentDidMount() {\r\n        const area = document.getElementById(this.idContainer);\r\n        Countable.count(area, (counter) => {\r\n            this.setState({\r\n                initTime: Date.now(),\r\n                amountOfWords: counter.words\r\n            });\r\n        });\r\n    }\r\n\r\n    userEndTheTest() {\r\n\r\n        let minutes = (Date.now() - this.state.initTime) / 60000;\r\n\r\n        let wpm = Math.round(this.state.amountOfWords / minutes);\r\n        this.setState({\r\n            isFinished: true,\r\n            time: Math.round((minutes + Number.EPSILON) * 100) / 100,\r\n            wpm: wpm\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"container Exercise-description\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h2 className=\"text-center\">\r\n                                <strong>Speed reading test</strong>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center text-justify\">\r\n                        <div className=\"col-md-6 mt-5 mb-5\">\r\n                            <p id=\"countableArea\" className=\"text-lighter\">Have you ever wondered what it\r\n                                means to live in the present? Arent we all here, now, in the present?\r\n                                Technically, yes, but for so many of us, we are only 10 percent here. We are\r\n                                really living in our minds. We exist from day-to-day in a dream-like state where\r\n                                were not really connected to the world around us, nor centered in our own body\r\n                                or being. Instead, were preoccupied with memories of the past, churning thoughts\r\n                                and worries about the future, and judgments and reactions to the few things we\r\n                                do see. Were literally missing out on most our own lives, which leaves us\r\n                                feeling shallow, empty and deeply unsettled. The great news is you can learn to\r\n                                be more present and mindful. Here are 10 easy ways you can practice mindfulness\r\n                                in your daily life. 1. Eat mindfully. When you scoff down your meal on autopilot\r\n                                while distracted by the television, computer or constant conversation, you miss\r\n                                out on the delicious taste and smell of your food. Youre also less likely to\r\n                                feel satisfied and nourished, because you missed out on the fact that you ate.\r\n                                It can be helpful to remember this phrase: When you eat, eat. When you drink,\r\n                                drink. In other words, dont attempt to do fifty other things when you sit down\r\n                                to a meal, coffee or green juice. Simply focus all of your attention on what is\r\n                                in front of you. 2. Walk mindfully. The essential guide to taking care of your\r\n                                mind and body Subscribe to HuffPost’s wellness email Thanks! You have been\r\n                                successfully signed up. Take a beautiful tip from spiritual leader Thich Nhat\r\n                                Hanh and walk as if you are kissing the earth with your feet. In others words,\r\n                                when you are out and about, pay attention occasionally to the movement of your\r\n                                body and your surroundings. Notice as your feet connect with and leave the\r\n                                ground. Feel your muscles moving and supporting you. Observe what is going on\r\n                                around you -- the sights, sounds and life unfolding. You may be amazed to find a\r\n                                whole new world you hadnt even noticed before.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container text-center mt-5\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-7\">\r\n                            <button\r\n                                disabled={this.state.isFinished}\r\n                                onClick={() => this.userEndTheTest()}\r\n                                className=\"btn btn-secondary\"\r\n                                type=\"button\">Finish</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {this.state.isFinished && <div\r\n                    className=\"container text-center running-words-container r-w-container-respuestas\">\r\n                    <div className=\"row mb-5\">\r\n                        <div className=\"col-12\">\r\n                            <h1 className=\"text-monospace text-center text-black-50\">Speed</h1>\r\n                            <h3 className=\"text-center text-black-50 mb-0\">{this.state.wpm}</h3>\r\n                            <h6 className=\"text-center text-black-50\">wpm</h6>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-7\">\r\n                            <h6 className=\"text-center text-black-50\">Amount of words: {this.state.amountOfWords}</h6>\r\n                            <h6 className=\"text-center text-black-50\">Time: {this.state.time}\r\n                                mins</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n}\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SpeedReadingTest;","import React, {Component, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class ReadingHelperController extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n\r\n                <div\r\n                    className=\"container text-center running-words-container r-w-container-respuestas\"\r\n                    id=\"controllers\">\r\n                    <div className=\"row justify-content-center d-flex\">\r\n                        <div className=\"d-flex\">\r\n                            <div className=\"d-flex p-7\">\r\n                                <button\r\n                                    id=\"btn-wpm-down\"\r\n                                    onClick={() => this.props.userChangeWPM(false)}\r\n                                    className=\"btn btn-secondary\"\r\n                                    type=\"button\">&lt;&lt;</button>\r\n                            </div>\r\n                            <div className=\"d-flex align-self-end\">\r\n                                <div>\r\n                                    <h6 className=\"text-center text-black-50 mb-0\">{this.props.wpm}</h6>\r\n                                    <h6 className=\"text-center text-black-50\">wpm</h6>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"d-flex p-7\">\r\n                                <button\r\n                                    id=\"btn-wpm-up\"\r\n                                    onClick={() => this.props.userChangeWPM(true)}\r\n                                    className=\"btn btn-secondary\"\r\n                                    type=\"button\">&gt;&gt;</button>\r\n                            </div>\r\n                            <div className=\"d-flex\">\r\n                                <div className=\"d-flex align-self-center mr-2 ml-2 min-full-width\">\r\n                                    <h6 className=\"text-center text-black-50\">Remove words:</h6>\r\n                                </div>\r\n\r\n                                <label className=\"switch align-self-center\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        className=\"warning\"\r\n                                        onChange={this.props.userRemoveWords}/>\r\n                                    <span className=\"slider round\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"d-flex p-7\">\r\n                                <button\r\n                                    id=\"btn-reset-words\"\r\n                                    onClick={() => this.props.userResetWords()}\r\n                                    className=\"btn btn-secondary\"\r\n                                    type=\"button\">Reset</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"row justify-content-center d-flex\">\r\n\r\n                        <div className=\"d-flex align-self-center min-full-width mt-2\">\r\n\r\n                            <label className=\"align-self-center\">\r\n                                <input\r\n                                    type=\"range\"\r\n                                    className=\"custom-range\"\r\n                                    id=\"customRange1\"\r\n                                    value={this.props.dividerSpacing}\r\n                                    onChange={e => this\r\n                                    .props\r\n                                    .userChangeDividerSpacing(e)}/>\r\n\r\n                                <h6 className=\"text-center text-black-50\">Spacing</h6>\r\n                            </label>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nReadingHelperController.propTypes = {\r\n    wpm: PropTypes.number.isRequired,\r\n    dividerSpacing: PropTypes.number.isRequired,\r\n    userChangeWPM: PropTypes.func.isRequired,\r\n    userRemoveWords: PropTypes.func.isRequired,\r\n    userResetWords: PropTypes.func.isRequired,\r\n    userChangeDividerSpacing: PropTypes.func.isRequired\r\n};","import React, {Component, Fragment} from 'react';\r\nimport ReactAnimationFrame from 'react-animation-frame';\r\nimport ReadingHelperController from './ReadingHelperController';\r\nimport $ from 'jquery';\r\n\r\nclass ReadingHelper extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            init: false,\r\n            wpm: 400,\r\n            divider: 25\r\n        };\r\n\r\n        this.wordRef = 0;\r\n\r\n        this.removeWords = false;\r\n\r\n        this.toSpanSelector = '#toSpanSelector';\r\n        this.disappearAnimationClass = 'disappear-animation';\r\n        this.appearAnimationClass = 'appear-animation';\r\n\r\n        this.nextFireWord = 0;\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        $(this.toSpanSelector)\r\n            .each(function () {\r\n                var text = $(this)\r\n                    .text()\r\n                    .split(' ');\r\n\r\n                for (var i = 0, len = text.length; i < len; i++) {\r\n                    text[i] = '<span id=\"word-' + i + '\">' + text[i] + '</span>';\r\n                }\r\n                $(this).html(text.join(' '));\r\n\r\n            });\r\n\r\n    }\r\n\r\n    wpmToMs(wpm) {\r\n        return 60000 / wpm;\r\n    }\r\n\r\n    tick() {\r\n        //AddClass\r\n        let _this = this;\r\n        $(`#word-${_this.wordRef}`).addClass(this.disappearAnimationClass);\r\n        this.wordRef++;\r\n    }\r\n\r\n    onAnimationFrame(time) {\r\n        if (this.wordRef === 4) {\r\n            $(`${this.toSpanSelector} .${this.appearAnimationClass}`).removeClass(this.appearAnimationClass);\r\n        }\r\n        if (this.removeWords && time > this.nextFireWord) {\r\n            this.nextFireWord = time + this.wpmToMs(this.state.wpm);\r\n\r\n            this.tick();\r\n        }\r\n    }\r\n    userChangeWPM(isUp) {\r\n        let wpm = this.state.wpm;\r\n        if (isUp) {\r\n            wpm = this.state.wpm + 50;\r\n        } else if (this.state.wpm > 100) {\r\n            wpm = this.state.wpm - 50;\r\n        }\r\n        this.setState({wpm: wpm});\r\n    }\r\n\r\n    userRemoveWords(event) {\r\n        this.removeWords = event.target.checked;\r\n    }\r\n\r\n    userResetWords() {\r\n        $(`${this.toSpanSelector} .${this.disappearAnimationClass}`)\r\n            .removeClass(this.disappearAnimationClass)\r\n            .addClass(this.appearAnimationClass);\r\n        this.wordRef = 0;\r\n    }\r\n\r\n    userChangeDividerSpacing(event) {\r\n        this.setState({divider: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n\r\n                <div className=\"container\">\r\n\r\n                    <ReadingHelperController\r\n                        wpm={this.state.wpm}\r\n                        userChangeWPM={(isUp) => {\r\n                        this.userChangeWPM(isUp)\r\n                    }}\r\n                        userRemoveWords={(event) => {\r\n                        this.userRemoveWords(event)\r\n                    }}\r\n                        userResetWords={() => {\r\n                        this.userResetWords()\r\n                    }}\r\n                        userChangeDividerSpacing={(event) => {\r\n                        this.userChangeDividerSpacing(event)\r\n                    }}\r\n                        dividerSpacing={this.state.divider}/>\r\n\r\n                    <div className=\"row justify-content-center text-justify\">\r\n                        <div className=\"col-md-6 mt-5 mb-5\">\r\n                            <div\r\n                                id=\"l-divider\"\r\n                                style={{\r\n                                left: this.state.divider / 2 + '%'\r\n                            }}></div>\r\n\r\n                            <div\r\n                                id=\"r-divider\"\r\n                                style={{\r\n                                right: this.state.divider / 2 + '%'\r\n                            }}></div>\r\n\r\n                            <p id=\"toSpanSelector\" className=\"text-lighter\">Have you ever wondered what it\r\n                                means to live in the present? Arent we all here, now, in the present?\r\n                                Technically, yes, but for so many of us, we are only 10 percent here. We are\r\n                                really living in our minds. We exist from day-to-day in a dream-like state where\r\n                                were not really connected to the world around us, nor centered in our own body\r\n                                or being. Instead, were preoccupied with memories of the past, churning thoughts\r\n                                and worries about the future, and judgments and reactions to the few things we\r\n                                do see. Were literally missing out on most our own lives, which leaves us\r\n                                feeling shallow, empty and deeply unsettled. The great news is you can learn to\r\n                                be more present and mindful. Here are 10 easy ways you can practice mindfulness\r\n                                in your daily life. 1. Eat mindfully. When you scoff down your meal on autopilot\r\n                                while distracted by the television, computer or constant conversation, you miss\r\n                                out on the delicious taste and smell of your food. Youre also less likely to\r\n                                feel satisfied and nourished, because you missed out on the fact that you ate.\r\n                                It can be helpful to remember this phrase: When you eat, eat. When you drink,\r\n                                drink. In other words, dont attempt to do fifty other things when you sit down\r\n                                to a meal, coffee or green juice. Simply focus all of your attention on what is\r\n                                in front of you. 2. Walk mindfully. The essential guide to taking care of your\r\n                                mind and body Subscribe to HuffPost’s wellness email Thanks! You have been\r\n                                successfully signed up. Take a beautiful tip from spiritual leader Thich Nhat\r\n                                Hanh and walk as if you are kissing the earth with your feet. In others words,\r\n                                when you are out and about, pay attention occasionally to the movement of your\r\n                                body and your surroundings. Notice as your feet connect with and leave the\r\n                                ground. Feel your muscles moving and supporting you. Observe what is going on\r\n                                around you -- the sights, sounds and life unfolding. You may be amazed to find a\r\n                                whole new world you hadnt even noticed before.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReactAnimationFrame(ReadingHelper);","import React, {Component} from 'react';\nimport './App.css';\n\nimport \"./assets/bootstrap/css/bootstrap.min.css\";\nimport \"./assets/fonts/font-awesome.min.css\";\nimport \"./assets/fonts/ionicons.min.css\";\nimport \"./assets/css/Features-Boxed.css\";\nimport \"./assets/css/Footer-Clean.css\";\nimport \"./assets/css/Navigation-Clean.css\";\nimport \"./assets/css/styles.css\";\n\nimport {HashRouter as Router, Switch, Route} from \"react-router-dom\";\nimport {createBrowserHistory} from 'history';\nimport ReactGA from 'react-ga';\nimport Config from './Config';\nimport Header from './components/globals/Header';\nimport Footer from './components/globals/Footer';\nimport Features from './components/exercises/Features';\nimport RunningWords from './components/exercises/RunningWords/RunningWords';\nimport ColumnsOfWords from './components/exercises/ColumnsOfWords/ColumnsOfWords';\nimport BlockOfWords from './components/exercises/BlockOfWords/BlockOfWords';\nimport SpeedReadingTest from './components/exercises/SpeedReadingTest/SpeedReadingTest';\nimport ReadingHelper from './components/exercises/ReadingHelper/ReadingHelper';\n\nexport class App extends Component {\n    constructor(props) {\n        super(props);\n        this.history = createBrowserHistory();\n        ReactGA.initialize(Config.googleTrackingId);\n        // Initialize google analytics page view tracking\n        this.history.listen(location => {\n            ReactGA.set({page: location.pathname}); // Update the user's current page\n            ReactGA.pageview(location.pathname); // Record a pageview for the given page\n        });\n\n    }\n    render() {\n        return (\n            <Router history={this.history}>\n                <Header/>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Features/>\n                    </Route>\n\n                    <Route path=\"/speed-reading-test\">\n                        <SpeedReadingTest/>\n                    </Route>\n\n                    <Route path=\"/running-words\">\n                        <RunningWords/>\n                    </Route>\n                    <Route path=\"/columns-of-words\">\n                        <ColumnsOfWords/>\n                    </Route>\n\n                    <Route path=\"/block-of-words\">\n                        <BlockOfWords/>\n                    </Route>\n                    <Route path=\"/reading-helper\">\n                        <ReadingHelper/>\n                    </Route>\n\n                </Switch>\n                <Footer/>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls. Learn\n// more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}